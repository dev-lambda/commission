"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[668],{3905:(e,t,i)=>{i.d(t,{Zo:()=>u,kt:()=>g});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(i),d=r,g=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return i?n.createElement(g,a(a({ref:t},u),{},{components:i})):n.createElement(g,a({ref:t},u))}));function g(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,a[1]=s;for(var c=2;c<o;c++)a[c]=i[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}d.displayName="MDXCreateElement"},5765:(e,t,i)=>{i.r(t),i.d(t,{contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=i(7462),r=(i(7294),i(3905));const o={},a="Commission",s={type:"mdx",permalink:"/commission/",source:"@site/src/pages/index.mdx",title:"Commission",description:"Asynchronous job queuing and execution tracking system.",frontMatter:{}},l=[{value:"Features",id:"features",level:2},{value:"Commissions dispatch and execution tracking",id:"commissions-dispatch-and-execution-tracking",level:3},{value:"Integrity",id:"integrity",level:3},{value:"Execution control",id:"execution-control",level:3},{value:"Error recovery",id:"error-recovery",level:3},{value:"Observability",id:"observability",level:3},{value:"Security",id:"security",level:3},{value:"Integration",id:"integration",level:3},{value:"Scalability",id:"scalability",level:3}],c={toc:l},u="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(u,(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"commission"},"Commission"),(0,r.kt)("p",null,"Asynchronous job queuing and execution tracking system."),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("h3",{id:"commissions-dispatch-and-execution-tracking"},"Commissions dispatch and execution tracking"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Dispatch background jobs to dedicated microservices"),(0,r.kt)("li",{parentName:"ul"},"Job Submission: Commission allows clients to submit jobs for asynchronous processing."),(0,r.kt)("li",{parentName:"ul"},"Job Management: Commission provides an interface for monitoring the progress of jobs and retrieving the results when they are completed."),(0,r.kt)("li",{parentName:"ul"},"Job Prioritization: Commission allows for jobs to be prioritized based on their importance or urgency."),(0,r.kt)("li",{parentName:"ul"},"Track job execution status")),(0,r.kt)("h3",{id:"integrity"},"Integrity"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Ensure that each job request is processed at least once and successfully so at most once (unless cancelled or expired).")),(0,r.kt)("h3",{id:"execution-control"},"Execution control"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Schedule execution."),(0,r.kt)("li",{parentName:"ul"},"Cancel, reschedule job requests."),(0,r.kt)("li",{parentName:"ul"},"Set a validity expiration date."),(0,r.kt)("li",{parentName:"ul"},"Automatic Retry: Commission provides automatic retry functionality for failed jobs, with configurable retry policies and backoff strategies."),(0,r.kt)("li",{parentName:"ul"},"Dead Letter Queue: Commission can route failed jobs to a dead letter queue, allowing for manual inspection and debugging of failed jobs.")),(0,r.kt)("h3",{id:"error-recovery"},"Error recovery"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Recover from microservices errors, replay commissions"),(0,r.kt)("li",{parentName:"ul"},"Error Handling: Commission provides configurable error handling mechanisms to manage job failures and retries."),(0,r.kt)("li",{parentName:"ul"},"Graceful Degradation: Commission can gracefully degrade functionality when dependent microservices are unavailable, allowing other jobs to continue processing.")),(0,r.kt)("h3",{id:"observability"},"Observability"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Monitor background job activity"),(0,r.kt)("li",{parentName:"ul"},"Real-Time Monitoring: Commission provides real-time monitoring of job progress, allowing clients to view updates on job status as they occur."),(0,r.kt)("li",{parentName:"ul"},"Reporting: Commission provides reporting and analytics features, allowing clients to track job performance and identify areas for optimization."),(0,r.kt)("li",{parentName:"ul"},"Error Logging: Commission can log errors and exceptions for debugging purposes, providing insights into the root cause of job failures.")),(0,r.kt)("h3",{id:"security"},"Security"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Security: Commission provides authentication and authorization mechanisms to ensure that only authorized users can submit and monitor jobs."),(0,r.kt)("li",{parentName:"ul"},"Circuit Breaking: Commission can implement circuit breaking patterns to detect and handle failures in downstream microservices, preventing cascading failures.")),(0,r.kt)("h3",{id:"integration"},"Integration"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Commission makes no assumption on the technology used to execute jobs, instead it provides a protocol for job execution tracking that can be easily integrated on your current codebase."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("del",{parentName:"li"},"Message Queue Integration: Commission can integrate with a variety of message queue technologies, such as RabbitMQ or Kafka, to manage job queues.")),(0,r.kt)("li",{parentName:"ul"},"Customization: Commission is highly customizable, allowing for configuration of parameters such as timeout durations, retry limits, and worker node capacity.")),(0,r.kt)("h3",{id:"scalability"},"Scalability"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Scalability: Commission is designed to scale horizontally, allowing for multiple worker nodes to process jobs in parallel."),(0,r.kt)("li",{parentName:"ul"},"Load Balancing: Commission can implement load balancing techniques to distribute job processing across multiple worker nodes, improving fault tolerance and scalability."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("del",{parentName:"li"},"Service Discovery: Commission can use service discovery mechanisms to dynamically locate available worker nodes, ensuring that jobs are processed even when worker nodes fail or come online.")),(0,r.kt)("li",{parentName:"ul"},"Health Checks: Commission can implement health checks to monitor the availability and performance of worker nodes, ensuring that only healthy nodes are used for job processing.")))}m.isMDXComponent=!0}}]);